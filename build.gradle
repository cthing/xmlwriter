import java.text.SimpleDateFormat

// This project is consumed by infrastructure bootstrap code. Therefore it does not use any
// C Thing Software Gradle plugins and is in the org.cthing domain so it can be consumed as
// a third party dependency.

static boolean isOnCIServer() {
    System.getenv('BUILD_NUMBER') && System.getenv('EXECUTOR_NUMBER')
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'signing'

ext.buildNumber = onCIServer ? Long.toString(System.currentTimeMillis()): '0'
version = "1.0.0.${buildNumber}"
group = 'org.cthing'
description = 'A simple yet highly configurable XML writing library.'

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.5.2'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:all' << '-Xlint:-options' << '-Werror'
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Vendor': 'C Thing Software',
                   'Implementation-Version': project.version)
    }
}

javadoc {
    options {
        breakIterator = true
        encoding = 'UTF-8'
        bottom = "Copyright &copy; ${new SimpleDateFormat('yyyy', Locale.ENGLISH).format(new Date())} C Thing Software. All rights reserved."
        memberLevel = JavadocMemberLevel.PUBLIC
        outputLevel = JavadocOutputLevel.QUIET
    }
}

checkstyle {
    toolVersion = '7.1'
    ignoreFailures = false
    configFile = project.file('dev/checkstyle/checkstyle.xml')
    configProperties['config_loc'] = project.file('dev/checkstyle')
    showViolations = true
}

findbugs {
    toolVersion = '3.0.1'
    ignoreFailures = false
    effort = 'max'
    reportLevel = 'medium'
    excludeFilter = project.file('dev/findbugs/suppressions.xml')
    sourceSets = [sourceSets.main]
}

jacoco {
    toolVersion = '0.7.7.201606060606'
}

jacocoTestReport {
    dependsOn 'test'
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
        html.destination new File(buildDir, 'reports/jacoco')
    }
}

test {
    jacoco {
        append = false
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier 'javadoc'
}

boolean canSign() {
    project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&
            project.hasProperty('signing.secretKeyRingFile')
}

File pomFile = new File(buildDir, "${project.name}-${version}.pom")

if (canSign()) {
    signing {
        sign jar
        sign sourceJar
        sign javadocJar
    }

    task signPom(type: Sign)

    project.tasks.withType(AbstractPublishToMaven) {
        dependsOn signJar, signSourceJar, signJavadocJar, signPom
    }

    model {
        tasks.generatePomFileForMavenJavaPublication {
            destination = pomFile
        }

        tasks.signPom {
            dependsOn tasks.generatePomFileForMavenJavaPublication
            inputs.file(pomFile)
            outputs.file("${pomFile}.asc")
            sign pomFile
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar
            artifact javadocJar

            if (canSign()) {
                [
                        [files: signJar.signatureFiles.files, classifier: null, extension: 'jar.asc'],
                        [files: signSourceJar.signatureFiles.files, classifier: 'sources', extension: 'jar.asc'],
                        [files: signJavadocJar.signatureFiles.files, classifier: 'javadoc', extension: 'jar.asc'],
                        [files: [pomFile], classifier: null, extension: 'pom.asc'],
                ].each { artifactInfo ->
                    artifactInfo.files.each {
                        artifact(it) {
                            classifier artifactInfo.classifier
                            extension artifactInfo.extension
                        }
                    }
                }
            }

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = DELEGATE_FIRST

                    name project.name
                    description project.description
                    url 'https://bitbucket.org/cthing/xmlwriter'
                    licenses {
                        license {
                            name 'Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0'
                        }
                    }
                    developers {
                        developer {
                            id 'baron'
                            name 'Baron Roberts'
                            email 'baron@cthing.con'
                            organization 'C Thing Software'
                            organizationUrl 'http://www.cthing.com'
                        }
                    }
                    scm {
                        connection 'scm:git:git://bitbucket.org/cthing/xmwriter.git'
                        developerConnection 'scm:git:ssh://bitbucket.org:cthing/xmlwriter'
                        url 'https://bitbucket.org/cthing/xmlwriter/src'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url project.nexusReleasesUrl
            credentials {
                username = project.nexusUser
                password = project.nexusPassword
            }
        }
    }
}
