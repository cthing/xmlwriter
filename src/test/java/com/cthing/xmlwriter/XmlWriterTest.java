/*
 * Copyright 2014 C Thing Software
 * All rights reserved.
 */
package com.cthing.xmlwriter;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.lang.reflect.Method;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import javax.xml.XMLConstants;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;

import org.junit.Test;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.AttributesImpl;

import static org.hamcrest.MatcherAssert.*;
import static org.hamcrest.Matchers.*;

import static com.cthing.test.matchers.Matchers.*;


/**
 * Tests for the {@link XmlWriter} class.
 */
public class XmlWriterTest {

    /**
     * During development of XmlWriter it may be useful to see the output generated by certain tests. To see the
     * output change the value of the XmlWriterTest.output property to true using the JVM -D flag.
     */
    static final boolean SHOW_OUTPUT = Boolean.getBoolean(System.getProperty("XmlWriterTest.output", "false"));
    /** Specifies the newline character sequence to use. */
    static final String NEWLINE = System.getProperty("line.separator");


    /**
     * Constructor for the test class.
     */
    public XmlWriterTest() {
    }

    /**
     * Displays the specified writer contents on the standard output if the SHOW_OUTPUT flag is true.
     *
     * @param writer Writer whose contents is to be displayed
     * @param msg Message describing the output
     */
    private void showOutput(final StringWriter writer, final String msg) {
        if (SHOW_OUTPUT) {
            System.out.println("\n------------- " + msg);
            System.out.print(writer);
        }
    }

    /**
     * Tests the private writeRaw methods.
     */
    @Test
    public void testWriteRaw() throws Exception {
        /*
         * To test the private methods, use reflection.
         */
        final Method writeRawString = XmlWriter.class.getDeclaredMethod("writeRaw", String.class);
        final Method writeRawArray = XmlWriter.class.getDeclaredMethod("writeRaw", char[].class, int.class, int.class);
        final Method writeRawChar = XmlWriter.class.getDeclaredMethod("writeRaw", char.class);
        writeRawString.setAccessible(true);
        writeRawArray.setAccessible(true);
        writeRawChar.setAccessible(true);

        StringWriter writer = new StringWriter();
        final XmlWriter xmlWriter = new XmlWriter(writer);
        final String testString = "Hello &<>\" World\u00A9\n";

        writeRawString.invoke(xmlWriter, testString);
        assertThat(writer.toString(), equalTo(testString));

        writer = new StringWriter();
        xmlWriter.setOutput(writer);

        writeRawArray.invoke(xmlWriter, testString.toCharArray(), 5, 2);
        assertThat(writer.toString(), equalTo(testString.substring(5, 7)));

        writer = new StringWriter();
        xmlWriter.setOutput(writer);

        writeRawChar.invoke(xmlWriter, testString.charAt(2));
        final String s = writer.toString();
        assertThat(s, hasLength(1));
        assertThat(s.charAt(0), equalTo(testString.charAt(2)));
    }

    /**
     * Tests the private writeEscaped methods.
     */
    @Test
    public void testWriteEscaped() throws Exception {
        /*
         * To test the private methods, use reflection.
         */
        final Method writeEscapedArray = XmlWriter.class.getDeclaredMethod("writeEscaped", char[].class, int.class,
                int.class);
        final Method writeEscapedChar = XmlWriter.class.getDeclaredMethod("writeEscaped", char.class);
        writeEscapedArray.setAccessible(true);
        writeEscapedChar.setAccessible(true);

        StringWriter writer = new StringWriter();
        final XmlWriter xmlWriter = new XmlWriter(writer);
        final String testStringIn = "<Hello &<>\" World\u00A9\u001A\t\n";
        final String testStringOut = "&lt;Hello &amp;&lt;&gt;\" World&#169;ctrl-26\t\n";

        writeEscapedArray.invoke(xmlWriter, testStringIn.toCharArray(), 0, testStringIn.length() - 1);
        assertThat(writer.toString(), equalTo(testStringOut.substring(0, testStringOut.length() - 1)));

        writer = new StringWriter();
        xmlWriter.setOutput(writer);

        writeEscapedChar.invoke(xmlWriter, '\u00A9');
        String s = writer.toString();
        assertThat(s, equalTo("&#169;"));

        writer = new StringWriter();
        xmlWriter.setOutput(writer);

        writeEscapedChar.invoke(xmlWriter, '\u001A');
        s = writer.toString();
        assertThat(s, equalTo("ctrl-26"));

        /*
         * Turn off escaping and verify that escaping is not performed.
         */
        writer = new StringWriter();
        xmlWriter.setOutput(writer);
        xmlWriter.setEscaping(false);

        writeEscapedArray.invoke(xmlWriter, testStringIn.toCharArray(), 1, testStringIn.length() - 2);
        assertThat(writer.toString(), equalTo(testStringIn.substring(1, testStringIn.length() - 1)));
    }

    /**
     * Tests the private writeQuoted methods.
     */
    @Test
    public void testWriteQuoted() throws Exception {
        /*
         * To test the private methods, use reflection.
         */
        final Method writeQuotedString = XmlWriter.class.getDeclaredMethod("writeQuoted", String.class);
        final Method writeQuotedArray = XmlWriter.class.getDeclaredMethod("writeQuoted", char[].class, int.class, int.class);
        writeQuotedString.setAccessible(true);
        writeQuotedArray.setAccessible(true);

        StringWriter writer = new StringWriter();
        final XmlWriter xmlWriter = new XmlWriter(writer);
        final String testStringIn = "Hello &<>\"\' World\u00A9";
        final String testStringOut = "\"Hello &amp;&lt;&gt;&quot;&apos; World&#169;\"";

        writeQuotedString.invoke(xmlWriter, testStringIn);
        assertThat(writer.toString(), equalTo(testStringOut));

        writer = new StringWriter();
        xmlWriter.setOutput(writer);

        writeQuotedArray.invoke(xmlWriter, testStringIn.toCharArray(), 9, 2);
        assertThat(writer.toString(), equalTo("\"" + testStringOut.substring(20, 32) + "\""));

        /*
         * Turn off escaping and verify that escaping is not performed.
         */
        writer = new StringWriter();
        xmlWriter.setOutput(writer);
        xmlWriter.setEscaping(false);

        writeQuotedString.invoke(xmlWriter, testStringIn);
        assertThat(writer.toString(), equalTo("\"" + testStringIn + "\""));
    }

    /**
     * Tests a minimal document.
     */
    @Test
    public void testMinimalDocument() throws Exception {
        StringWriter writer = new StringWriter();
        final XmlWriter xmlWriter = new XmlWriter(writer);

        xmlWriter.startDocument();
        xmlWriter.endDocument();
        showOutput(writer, "startDocument()");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE + NEWLINE));

        xmlWriter.reset();

        writer = new StringWriter();
        xmlWriter.setOutput(writer);
        xmlWriter.startDocument(null, false, false);
        xmlWriter.endDocument();
        showOutput(writer, "startDocument(null, false, false)");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"no\"?>" + NEWLINE + NEWLINE + NEWLINE));

        xmlWriter.reset();

        writer = new StringWriter();
        xmlWriter.setOutput(writer);
        xmlWriter.startDocument("UTF-8", false, false);
        xmlWriter.endDocument();
        showOutput(writer, "startDocument(\"UTF-8\", false, false)");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>"
                + NEWLINE + NEWLINE + NEWLINE));

        xmlWriter.reset();

        writer = new StringWriter();
        xmlWriter.setOutput(writer);
        xmlWriter.startDocument("UTF-8", false, true);
        xmlWriter.endDocument();
        showOutput(writer, "startDocument(\"UTF-8\", false, true)");
        assertThat(writer.toString(), equalTo(NEWLINE));
    }

    /**
     * Tests simple element operations.
     */
    @Test
    public void testSimpleElements() throws Exception {
        StringWriter writer = new StringWriter();
        final XmlWriter xmlWriter = new XmlWriter(writer);

        xmlWriter.setMinimizeEmpty(false);
        xmlWriter.startDocument();
        xmlWriter.startElement("elem1");
        xmlWriter.endElement();
        xmlWriter.endDocument();
        xmlWriter.setMinimizeEmpty(true);

        showOutput(writer, "simple elements - no pretty print");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                + "<elem1></elem1>" + NEWLINE));

        xmlWriter.reset();
        writer = new StringWriter();
        xmlWriter.setOutput(writer);

        xmlWriter.startDocument();
        xmlWriter.startElement("elem1");
        xmlWriter.startElement("elem2").endElement();
        xmlWriter.emptyElement("elem3");
        xmlWriter.setMinimizeEmpty(false);
        xmlWriter.startElement("elem4");
        xmlWriter.endElement();
        xmlWriter.endElement();
        xmlWriter.endDocument();
        xmlWriter.setMinimizeEmpty(true);

        showOutput(writer, "simple elements - no pretty print");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                + "<elem1><elem2/><elem3/><elem4></elem4></elem1>" + NEWLINE));

        xmlWriter.reset();
        writer = new StringWriter();
        xmlWriter.setOutput(writer);

        xmlWriter.setPrettyPrint(true);
        xmlWriter.startDocument();
        xmlWriter.startElement("elem1");
        xmlWriter.startElement("elem2").endElement();
        xmlWriter.emptyElement("elem3");
        xmlWriter.setMinimizeEmpty(false);
        xmlWriter.startElement("elem4").endElement();
        xmlWriter.startElement("elem5");
        xmlWriter.startElement("elem6");
        xmlWriter.endElement();
        xmlWriter.endElement();
        xmlWriter.endElement();
        xmlWriter.endDocument();
        xmlWriter.setMinimizeEmpty(true);
        xmlWriter.setPrettyPrint(false);

        showOutput(writer, "simple elements - pretty print");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                + "<elem1>" + NEWLINE
                + "    <elem2/>" + NEWLINE
                + "    <elem3/>" + NEWLINE
                + "    <elem4>" + NEWLINE
                + "    </elem4>" + NEWLINE
                + "    <elem5>" + NEWLINE
                + "        <elem6>" + NEWLINE
                + "        </elem6>" + NEWLINE
                + "    </elem5>" + NEWLINE
                + "</elem1>" + NEWLINE));
    }

    /**
     * Tests attribute methods.
     */
    @Test
    public void testAttributes() throws Exception {
        StringWriter writer = new StringWriter();
        final XmlWriter xmlWriter = new XmlWriter(writer);
        xmlWriter.setPrettyPrint(true);

        final AttributesImpl attrs1 = new AttributesImpl();
        attrs1.addAttribute("", "a1", "", "CDATA", "v1");
        attrs1.addAttribute("", "a2", "", "CDATA", "v2");
        attrs1.addAttribute("", "a3", "", "CDATA", "v3");

        final AttributesImpl attrs2 = new AttributesImpl();
        attrs2.addAttribute("", "b1", "", "CDATA", "v10");
        attrs2.addAttribute("", "b2", "", "CDATA", "v20");
        attrs2.addAttribute("", "b3", "", "CDATA", "v30");

        xmlWriter.startDocument();
        xmlWriter.startElement("elem1", attrs1);
        xmlWriter.startElement("elem2", attrs2);
        xmlWriter.endElement();
        xmlWriter.endElement();
        xmlWriter.endDocument();

        showOutput(writer, "attributes - on same line");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                                            + "<elem1 a1=\"v1\" a2=\"v2\" a3=\"v3\">" + NEWLINE
                                            + "    <elem2 b1=\"v10\" b2=\"v20\" b3=\"v30\"/>" + NEWLINE
                                            + "</elem1>" + NEWLINE));

        xmlWriter.reset();
        writer = new StringWriter();
        xmlWriter.setOutput(writer);
        xmlWriter.setAttrPerLine(true);

        xmlWriter.startDocument();
        xmlWriter.startElement("elem1", attrs1);
        xmlWriter.startElement("elem2", attrs2).endElement();
        xmlWriter.endElement();
        xmlWriter.endDocument();

        showOutput(writer, "attributes - one per line");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                                            + "<elem1" + NEWLINE
                                            + "    a1=\"v1\"" + NEWLINE
                                            + "    a2=\"v2\"" + NEWLINE
                                            + "    a3=\"v3\"" + NEWLINE + ">" + NEWLINE
                                            + "    <elem2" + NEWLINE
                                            + "        b1=\"v10\"" + NEWLINE
                                            + "        b2=\"v20\"" + NEWLINE
                                            + "        b3=\"v30\"" + NEWLINE + "    />" + NEWLINE
                                            + "</elem1>" + NEWLINE));

        xmlWriter.setAttrPerLine(false);
        xmlWriter.reset();
        writer = new StringWriter();
        xmlWriter.setOutput(writer);

        xmlWriter.startDocument();
        xmlWriter.emptyElement("elem1", attrs1).addAttribute("z1", 13).addAttributes(attrs2);
        xmlWriter.endDocument();

        showOutput(writer, "attributes - augmenting");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                                            + "<elem1 a1=\"v1\" a2=\"v2\" a3=\"v3\" z1=\"13\" "
                                            + "b1=\"v10\" b2=\"v20\" b3=\"v30\"/>" + NEWLINE));

        xmlWriter.reset();
        writer = new StringWriter();
        xmlWriter.setOutput(writer);

        xmlWriter.startDocument();
        xmlWriter.emptyElement("elem1", attrs1);
        xmlWriter.setAttributes(attrs2);
        xmlWriter.endDocument();

        showOutput(writer, "attributes - replacing");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                                            + "<elem1 b1=\"v10\" b2=\"v20\" b3=\"v30\"/>" + NEWLINE));
    }

    /**
     * Tests inserting character data between elements.
     */
    @Test
    public void testCharacterData() throws Exception {
        StringWriter writer = new StringWriter();
        final XmlWriter xmlWriter = new XmlWriter(writer);

        xmlWriter.startDocument();
        xmlWriter.startElement("elem1");
        xmlWriter.characters("Hello World");
        xmlWriter.endElement();
        xmlWriter.endDocument();

        showOutput(writer, "character data - no pretty print");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                                            + "<elem1>Hello World</elem1>" + NEWLINE));

        xmlWriter.reset();
        writer = new StringWriter();
        xmlWriter.setOutput(writer);

        xmlWriter.setPrettyPrint(true);
        xmlWriter.startDocument();
        xmlWriter.startElement("elem1");
        xmlWriter.startElement("elem2").characters("Hello World").endElement();
        xmlWriter.startElement("elem3");
        xmlWriter.newline();
        xmlWriter.comment(" A comment ");
        xmlWriter.endElement();
        xmlWriter.endElement();
        xmlWriter.endDocument();
        xmlWriter.setPrettyPrint(false);

        showOutput(writer, "character data - pretty print");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                                            + "<elem1>" + NEWLINE
                                            + "    <elem2>Hello World</elem2>" + NEWLINE
                                            + "    <elem3>" + NEWLINE
                                            + "        <!-- A comment -->" + NEWLINE
                                            + "    </elem3>" + NEWLINE
                                            + "</elem1>" + NEWLINE));

        xmlWriter.reset();
        writer = new StringWriter();
        xmlWriter.setOutput(writer);

        xmlWriter.setPrettyPrint(true);
        xmlWriter.startDocument();
        xmlWriter.startElement("elem1");
        xmlWriter.characters("Hello World");
        xmlWriter.entityRef("amp");
        xmlWriter.characterRef('a');
        xmlWriter.startElement("elem2");
        xmlWriter.cdataSection("This is a <test>");
        xmlWriter.comment(" First comment ");
        xmlWriter.endElement();
        xmlWriter.endElement();
        xmlWriter.endDocument();
        xmlWriter.setPrettyPrint(false);

        showOutput(writer, "character data - pretty print");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                                            + "<elem1>Hello World&amp;&#97;<elem2>"
                                            + "<![CDATA[This is a <test>]]>"
                                            + "<!-- First comment --></elem2>" + NEWLINE
                                            + "</elem1>" + NEWLINE));
    }

    /**
     * Tests the handling of internal and external entity references.
     */
    @Test
    public void testEntityRefs() throws Exception {
        StringWriter writer = new StringWriter();
        final XmlWriter xmlWriter = new XmlWriter(writer);

        writer = new StringWriter();
        xmlWriter.setOutput(writer);

        xmlWriter.setPrettyPrint(true);
        xmlWriter.startDocument();
        xmlWriter.startElement("elem1");
        xmlWriter.characters("This ");
        xmlWriter.entityRef("amp");
        xmlWriter.characters(" that. The letter ");
        xmlWriter.characterRef('a');
        xmlWriter.emptyElement("elem2");
        xmlWriter.newline();
        xmlWriter.comment(" First comment ");
        xmlWriter.newline();
        xmlWriter.entityRef("extFile");
        xmlWriter.newline();
        xmlWriter.emptyElement("elem3");
        xmlWriter.emptyElement("elem4");
        xmlWriter.newline();
        xmlWriter.comment(" Second comment ").entityRef("charFile").comment(" Third comment ");
        xmlWriter.emptyElement("elem5");
        xmlWriter.newline();
        xmlWriter.comment(" Fourth comment ");
        xmlWriter.entityRef("dataFile", XmlWriter.FormattingHint.BLOCK);
        xmlWriter.comment(" Fifth comment ");
        xmlWriter.emptyElement("elem6");
        xmlWriter.endElement();
        xmlWriter.endDocument();

        showOutput(writer, "entity references - pretty print");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                                            + "<elem1>This &amp; that. The letter &#97;<elem2/>" + NEWLINE
                                            + "    <!-- First comment -->" + NEWLINE
                                            + "    &extFile;" + NEWLINE
                                            + "    <elem3/>" + NEWLINE
                                            + "    <elem4/>" + NEWLINE
                                            + "    <!-- Second comment -->&charFile;<!-- Third comment --><elem5/>" + NEWLINE
                                            + "    <!-- Fourth comment -->" + NEWLINE
                                            + "    &dataFile;" + NEWLINE
                                            + "    <!-- Fifth comment -->" + NEWLINE
                                            + "    <elem6/>" + NEWLINE
                                            + "</elem1>" + NEWLINE));
    }

    /**
     * Tests the handling of comments.
     */
    @Test
    public void testComments() throws Exception {
        final StringWriter writer = new StringWriter();
        final XmlWriter xmlWriter = new XmlWriter(writer);

        xmlWriter.setPrettyPrint(true);
        xmlWriter.startDocument();
        xmlWriter.startElement("elem1");
        xmlWriter.comment(" A comment 1 ");
        xmlWriter.emptyElement("elem2");
        xmlWriter.emptyElement("elem3");
        xmlWriter.emptyElement("elem4");
        xmlWriter.emptyElement("elem5");
        xmlWriter.startElement("elem6");
        xmlWriter.newline();
        xmlWriter.comment(" A comment 2 ");
        xmlWriter.newline();
        xmlWriter.comment(" A comment 3 ");
        xmlWriter.newline();
        xmlWriter.newline();
        xmlWriter.comment(" A comment 4 ");
        xmlWriter.emptyElement("elem7");
        xmlWriter.endElement();
        xmlWriter.endElement();
        xmlWriter.endDocument();

        showOutput(writer, "comments - pretty print");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                + "<elem1><!-- A comment 1 -->" + NEWLINE
                + "    <elem2/>" + NEWLINE
                + "    <elem3/>" + NEWLINE
                + "    <elem4/>" + NEWLINE
                + "    <elem5/>" + NEWLINE
                + "    <elem6>" + NEWLINE
                + "        <!-- A comment 2 -->" + NEWLINE
                + "        <!-- A comment 3 -->" + NEWLINE
                + "        " + NEWLINE
                + "        <!-- A comment 4 -->" + NEWLINE
                + "        <elem7/>" + NEWLINE
                + "    </elem6>" + NEWLINE
                + "</elem1>" + NEWLINE));
    }

    /**
     * Tests the DOCTYPE methods.
     */
    @Test
    public void testDoctype() throws Exception {
        StringWriter writer = new StringWriter();
        final XmlWriter xmlWriter = new XmlWriter(writer);

        xmlWriter.startDocument();
        xmlWriter.doctype("elem1", null, "/foo/bar.dtd");
        xmlWriter.endDocument();

        showOutput(writer, "doctype - no publicId");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                + "<!DOCTYPE elem1 SYSTEM \"/foo/bar.dtd\">" + NEWLINE + NEWLINE + NEWLINE));

        xmlWriter.reset();
        writer = new StringWriter();
        xmlWriter.setOutput(writer);

        xmlWriter.startDocument();
        xmlWriter.doctype("elem1", "FOO", "/foo/bar.dtd");
        xmlWriter.endDocument();

        showOutput(writer, "doctype - publicId");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                + "<!DOCTYPE elem1 PUBLIC \"FOO\" \"/foo/bar.dtd\">" + NEWLINE + NEWLINE + NEWLINE));

        xmlWriter.reset();
        writer = new StringWriter();
        xmlWriter.setOutput(writer);

        final List<XmlWriter.Entity> entities = new LinkedList<>();
        entities.add(new XmlWriter.Entity("ent1", "v1"));
        entities.add(new XmlWriter.Entity("ent2", null, "bar.xml", null));
        entities.add(new XmlWriter.Entity("ent3", "BAR", "foo.xml", null));
        entities.add(new XmlWriter.Entity("ent4", null, "joe.txt", "Txt"));

        final List<XmlWriter.Notation> notations = new LinkedList<>();
        notations.add(new XmlWriter.Notation("not1", null, "bar.xml"));
        notations.add(new XmlWriter.Notation("not2", "BAR", "foo.xml"));
        notations.add(new XmlWriter.Notation("not3", "BAR", null));

        xmlWriter.startDocument();
        xmlWriter.doctype("elem1", "FOO", "/foo/bar.dtd", entities, notations);
        xmlWriter.endDocument();

        showOutput(writer, "doctype - entities and notations");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                + "<!DOCTYPE elem1 PUBLIC \"FOO\" \"/foo/bar.dtd\" [" + NEWLINE
                + "    <!ENTITY ent1 \"v1\">" + NEWLINE
                + "    <!ENTITY ent2 SYSTEM \"bar.xml\">" + NEWLINE
                + "    <!ENTITY ent3 PUBLIC \"BAR\" \"foo.xml\">" + NEWLINE
                + "    <!ENTITY ent4 SYSTEM \"joe.txt\" NDATA Txt>" + NEWLINE
                + "    <!NOTATION not1 SYSTEM \"bar.xml\">" + NEWLINE
                + "    <!NOTATION not2 PUBLIC \"BAR\" \"foo.xml\">" + NEWLINE
                + "    <!NOTATION not3 PUBLIC \"BAR\">" + NEWLINE
                + "]>" + NEWLINE + NEWLINE + NEWLINE));
    }

    /**
     * Tests the processing instruction method.
     */
    @Test
    public void testPI() throws Exception {
        final StringWriter writer = new StringWriter();
        final XmlWriter xmlWriter = new XmlWriter(writer);

        xmlWriter.startDocument();
        xmlWriter.processingInstruction("foo", "bar=\"joe\"");
        xmlWriter.startElement("elem1");
        xmlWriter.endElement();
        xmlWriter.endDocument();

        showOutput(writer, "processing instruction");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                + "<?foo bar=\"joe\"?><elem1/>" + NEWLINE));
    }

    /**
     * Tests the namespace handling methods.
     */
    @Test
    public void testNamespaces() throws Exception {
        StringWriter writer = new StringWriter();
        XmlWriter xmlWriter = new XmlWriter(writer);
        xmlWriter.setPrettyPrint(true);

        xmlWriter.startDocument();
        xmlWriter.startElement("elem0");
        xmlWriter.emptyElement("http://www.adobe.com/test1", "elem1");
        xmlWriter.emptyElement("http://www.adobe.com/test1", "elem2");
        xmlWriter.emptyElement("http://www.adobe.com/test2", "elem3");
        xmlWriter.emptyElement("http://www.adobe.com/test3", "elem4");
        xmlWriter.endElement();
        xmlWriter.endDocument();

        showOutput(writer, "namespaces - synthesized prefix");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                + "<elem0>" + NEWLINE
                + "    <__NS1:elem1 xmlns:__NS1=\"http://www.adobe.com/test1\"/>" + NEWLINE
                + "    <__NS1:elem2 xmlns:__NS1=\"http://www.adobe.com/test1\"/>" + NEWLINE
                + "    <__NS2:elem3 xmlns:__NS2=\"http://www.adobe.com/test2\"/>" + NEWLINE
                + "    <__NS3:elem4 xmlns:__NS3=\"http://www.adobe.com/test3\"/>" + NEWLINE
                + "</elem0>" + NEWLINE));

        writer = new StringWriter();
        xmlWriter = new XmlWriter(writer);
        xmlWriter.setPrettyPrint(true);

        xmlWriter.addNSPrefix("t1", "http://www.adobe.com/test1");
        xmlWriter.addNSPrefix("t2", "http://www.adobe.com/test2");
        xmlWriter.addNSPrefix("", "http://www.adobe.com/test3");
        xmlWriter.startDocument();
        xmlWriter.startElement("elem0");
        xmlWriter.emptyElement("http://www.adobe.com/test1", "elem1");
        xmlWriter.emptyElement("http://www.adobe.com/test1", "elem2");
        xmlWriter.emptyElement("http://www.adobe.com/test2", "elem3");
        xmlWriter.emptyElement("http://www.adobe.com/test3", "elem4");
        xmlWriter.endElement();
        xmlWriter.endDocument();

        showOutput(writer, "namespaces - supplied prefix");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                + "<elem0>" + NEWLINE
                + "    <t1:elem1 xmlns:t1=\"http://www.adobe.com/test1\"/>" + NEWLINE
                + "    <t1:elem2 xmlns:t1=\"http://www.adobe.com/test1\"/>" + NEWLINE
                + "    <t2:elem3 xmlns:t2=\"http://www.adobe.com/test2\"/>" + NEWLINE
                + "    <elem4 xmlns=\"http://www.adobe.com/test3\"/>" + NEWLINE
                + "</elem0>" + NEWLINE));

        writer = new StringWriter();
        xmlWriter = new XmlWriter(writer);
        xmlWriter.setPrettyPrint(true);

        xmlWriter.addNSRootDecl("t1", "http://www.adobe.com/test1");
        xmlWriter.addNSRootDecl("t2", "http://www.adobe.com/test2");
        xmlWriter.addNSRootDecl("", "http://www.adobe.com/test3");
        xmlWriter.startDocument();
        xmlWriter.startElement("elem0");
        xmlWriter.emptyElement("http://www.adobe.com/test1", "elem1");
        xmlWriter.emptyElement("http://www.adobe.com/test1", "elem2");
        xmlWriter.emptyElement("http://www.adobe.com/test2", "elem3");
        xmlWriter.emptyElement("http://www.adobe.com/test3", "elem4");
        xmlWriter.endElement();
        xmlWriter.endDocument();

        showOutput(writer, "namespaces - root decl");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                + "<elem0 xmlns=\"http://www.adobe.com/test3\" "
                + "xmlns:t1=\"http://www.adobe.com/test1\" "
                + "xmlns:t2=\"http://www.adobe.com/test2\">" + NEWLINE
                + "    <t1:elem1/>" + NEWLINE
                + "    <t1:elem2/>" + NEWLINE
                + "    <t2:elem3/>" + NEWLINE
                + "    <elem4/>" + NEWLINE
                + "</elem0>" + NEWLINE));

        writer = new StringWriter();
        xmlWriter = new XmlWriter(writer);
        xmlWriter.setPrettyPrint(true);

        xmlWriter.startDocument();
        xmlWriter.startElement("elem0");
        xmlWriter.emptyElement("http://www.adobe.com/test1", "elem1", "t1:elem1");
        xmlWriter.emptyElement("http://www.adobe.com/test1", "elem2");
        xmlWriter.emptyElement("http://www.adobe.com/test2", "elem3");
        xmlWriter.endElement();
        xmlWriter.endDocument();

        showOutput(writer, "namespaces - qualified name template");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                + "<elem0>" + NEWLINE
                + "    <t1:elem1 xmlns:t1=\"http://www.adobe.com/test1\"/>" + NEWLINE
                + "    <t1:elem2 xmlns:t1=\"http://www.adobe.com/test1\"/>" + NEWLINE
                + "    <__NS1:elem3 xmlns:__NS1=\"http://www.adobe.com/test2\"/>" + NEWLINE
                + "</elem0>" + NEWLINE));

        writer = new StringWriter();
        xmlWriter = new XmlWriter(writer);
        xmlWriter.setPrettyPrint(true);

        final AttributesImpl attrs = new AttributesImpl();
        attrs.addAttribute("", "a1", "", "CDATA", "v1");
        attrs.addAttribute("http://www.adobe.com/at1", "a2", "", "CDATA", "v2");
        attrs.addAttribute("http://www.adobe.com/at3", "a3", "A3:a3", "CDATA", "v3");

        xmlWriter.setAttrPerLine(true);
        xmlWriter.addNSPrefix("t1", "http://www.adobe.com/test1");
        xmlWriter.startDocument();
        xmlWriter.startElement("elem0");
        xmlWriter.emptyElement("http://www.adobe.com/test1", "elem2", attrs);
        xmlWriter.endElement();
        xmlWriter.endDocument();

        showOutput(writer, "namespaces - qualified name template");
        assertThat(writer.toString(), equalTo("<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                + "<elem0>" + NEWLINE
                + "    <t1:elem2" + NEWLINE
                + "        a1=\"v1\"" + NEWLINE
                + "        __NS1:a2=\"v2\"" + NEWLINE
                + "        A3:a3=\"v3\"" + NEWLINE
                + "        xmlns:A3=\"http://www.adobe.com/at3\"" + NEWLINE
                + "        xmlns:__NS1=\"http://www.adobe.com/at1\"" + NEWLINE
                + "        xmlns:t1=\"http://www.adobe.com/test1\"" + NEWLINE
                + "    />" + NEWLINE
                + "</elem0>" + NEWLINE));
    }

    /**
     * Tests the XmlWriter as a filter parsing a simple XML document without
     * namespaces.
     */
    @Test
    public void testSimpleFilter1() throws Exception {
        final String xml = "<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                         + "<elem1 version=\"1\">" + NEWLINE
                         + "    <elem2 src=\"foo\">This is a test document</elem2>" + NEWLINE
                         + "    <elem3 dst=\"bar\"/>" + NEWLINE
                         + "    <elem4/>" + NEWLINE
                         + "</elem1>" + NEWLINE;

        final SAXParserFactory factory = SAXParserFactory.newInstance();
        factory.setNamespaceAware(false);
        factory.setValidating(false);
        factory.setXIncludeAware(false);

        final SAXParser parser = factory.newSAXParser();
        final XMLReader xmlReader = parser.getXMLReader();
        final StringWriter writer = new StringWriter();
        try (StringReader reader = new StringReader(xml)) {
            final XmlWriter xmlWriter = new XmlWriter(xmlReader, writer);

            xmlWriter.parse(new InputSource(reader));
        }

        showOutput(writer, "simple filter - no namespaces");
        assertThat(writer.toString(), equalTo(xml));
    }

    /**
     * Tests the XmlWriter as a filter parsing a simple XML document using
     * namespaces.
     */
    @Test
    public void testSimpleFilter2() throws Exception {
        final String xml = "<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                         + "<elem1 version=\"1\" xmlns=\"http://www.adobe.com/test\">" + NEWLINE
                         + "    <elem2 src=\"foo\">This is a test document</elem2>" + NEWLINE
                         + "    <t1:elem3 dst=\"bar\" xmlns:t1=\"http://www.adobe.com/test1\"/>" + NEWLINE
                         + "    <elem4/>" + NEWLINE
                         + "</elem1>" + NEWLINE;

        final SAXParserFactory factory = SAXParserFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setValidating(false);
        factory.setXIncludeAware(false);

        final SAXParser parser = factory.newSAXParser();
        final XMLReader xmlReader = parser.getXMLReader();
        final StringWriter writer = new StringWriter();
        try (StringReader reader = new StringReader(xml)) {
            final XmlWriter xmlWriter = new XmlWriter(xmlReader, writer);

            xmlWriter.parse(new InputSource(reader));
        }

        showOutput(writer, "simple filter - no namespaces");
        assertThat(writer.toString(), equalTo(xml));
    }

    /**
     * A more complete filter test including namespaces, DTD validation, CDATA
     * sections, comments, etc.
     */
    @Test
    public void testFilterDTD() throws Exception {
        final String xml = "<?xml version=\"1.0\" standalone=\"no\"?>" + NEWLINE + NEWLINE
                         + "<!DOCTYPE elem1 SYSTEM \"XmlWriterTest.dtd\">" + NEWLINE + NEWLINE
                         + "<elem1 version=\"1\" xmlns=\"http://www.adobe.com/test\">" + NEWLINE
                         + "    <elem2 src=\"foo\">This is a test document</elem2>" + NEWLINE
                         + "    <t1:elem3 dst=\"bar\" xmlns:t1=\"http://www.adobe.com/test1\"/>" + NEWLINE
                         + "    <!-- Next comes a CDATA section -->" + NEWLINE
                         + "    <elem4><![CDATA[final boolean v = a < 3;]]></elem4>" + NEWLINE
                         + "</elem1>" + NEWLINE;

        final SAXParserFactory factory = SAXParserFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setValidating(true);
        factory.setXIncludeAware(false);

        final SAXParser parser = factory.newSAXParser();
        final XMLReader xmlReader = parser.getXMLReader();
        final StringWriter writer = new StringWriter();
        try (StringReader reader = new StringReader(xml)) {
            final XmlWriter xmlWriter = new XmlWriter(xmlReader, writer);

            xmlWriter.setProperty("http://xml.org/sax/properties/lexical-handler",
                    xmlWriter);
            xmlWriter.setEntityResolver(new EntityResolver() {
                @Override
                public InputSource resolveEntity(final String publicId,
                                                 final String systemId)
                throws SAXException, IOException {
                    return new InputSource(getClass().getResourceAsStream("/XmlWriterTest.dtd"));
                }
            });
            xmlWriter.setStandalone(false);
            xmlWriter.parse(new InputSource(reader));
        }

        showOutput(writer, "filter - DTD validation, namespaces, CDATA, etc.");
        assertThat(writer.toString(), equalTo(xml));
    }

    /**
     * A more complete filter test including namespaces, Schema validation, CDATA sections, comments, etc.
     */
    @Test
    public void testFilterSchema() throws Exception {
        final String xml = "<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                         + "<elem1 version=\"1\">" + NEWLINE
                         + "    <elem2 src=\"foo\">This is a test document</elem2>" + NEWLINE
                         + "    <elem3 dst=\"bar\"/>" + NEWLINE
                         + "    <!-- Next comes a CDATA section -->" + NEWLINE
                         + "    <elem4><![CDATA[final boolean v = a < 3;]]></elem4>" + NEWLINE
                         + "</elem1>" + NEWLINE;

        final SchemaFactory schemaFactory =
                SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
        final URL url = getClass().getResource("/XmlWriterTest.xsd");
        final Schema schema = schemaFactory.newSchema(url);

        final SAXParserFactory factory = SAXParserFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setValidating(false);
        factory.setXIncludeAware(false);
        factory.setSchema(schema);

        final SAXParser parser = factory.newSAXParser();
        final XMLReader xmlReader = parser.getXMLReader();
        final StringWriter writer = new StringWriter();
        try (StringReader reader = new StringReader(xml)) {
            final XmlWriter xmlWriter = new XmlWriter(xmlReader, writer);

            xmlWriter.setProperty("http://xml.org/sax/properties/lexical-handler",
                    xmlWriter);
            xmlWriter.parse(new InputSource(reader));
        }

        showOutput(writer, "filter - Schema validation, CDATA, etc.");
        assertThat(writer.toString(), equalTo(xml));
    }

    /**
     * Tests writing default attributes.
     */
    @Test
    public void testDefaultAttributes() throws Exception {
        final String xml = "<?xml version=\"1.0\" standalone=\"yes\"?>" + NEWLINE + NEWLINE
                         + "<elem1 version=\"1\">" + NEWLINE
                         + "    <elem2 src=\"foo\">This is a test document</elem2>" + NEWLINE
                         + "    <elem3 dst=\"bar\" isGood=\"true\"/>" + NEWLINE
                         + "    <!-- Next comes a CDATA section -->" + NEWLINE
                         + "    <elem4><![CDATA[final boolean v = a < 3;]]></elem4>" + NEWLINE
                         + "</elem1>" + NEWLINE;

        final SchemaFactory schemaFactory =
                SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
        final URL url = getClass().getResource("/XmlWriterTest.xsd");
        final Schema schema = schemaFactory.newSchema(url);

        final SAXParserFactory factory = SAXParserFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setValidating(false);
        factory.setXIncludeAware(false);
        factory.setSchema(schema);

        final SAXParser parser = factory.newSAXParser();
        final XMLReader xmlReader = parser.getXMLReader();
        final StringWriter writer = new StringWriter();
        try (StringReader reader = new StringReader(xml)) {
            final XmlWriter xmlWriter = new XmlWriter(xmlReader, writer);

            xmlWriter.setSpecifiedAttributes(false);
            xmlWriter.setProperty("http://xml.org/sax/properties/lexical-handler",
                    xmlWriter);
            xmlWriter.parse(new InputSource(reader));
        }

        showOutput(writer, "filter - Schema validation, CDATA, etc.");
        assertThat(writer.toString(), equalTo(xml));
    }

    /**
     * Allows tests to be run standalone.
     *
     * @param args  Command line arguments
     */
//    @SuppressWarnings({ "nls" , "boxing" })
//    public static void main(final String[] args)
//    {
//        final TestSuite suite = new TestSuite(XmlWriterTest.class);
//
//        final TestResult results = new TestResult();
//        suite.run(results);
//        if (results.wasSuccessful()) {
//            System.out.println("Tests completed successfully");
//        }
//        else {
//            System.out.println("FAILURES");
//        }
//        System.out.printf("Failures: %d     Errors: %d\n\n",
//                          results.failureCount(),
//                          results.errorCount());
//        if (results.failureCount() > 0) {
//            final Enumeration failures = results.failures();
//            while (failures.hasMoreElements()) {
//                System.out.println(failures.nextElement().toString());
//            }
//        }
//    }
}
